#!/usr/bin/python3
"""Defineafnthatmultipliesamatrix"""
defmatrix_mul(m_a,m_b):
"""
Multipliesm_abym_b

Args:
m_a:firstmatrix
m_b:secondmatrix

Raises:
TypeError:ifm_aorm_bisnotalist
TypeError:ifm_aorm_bisnotalistoflists
TypeError:ifoneelementofthoselistoflistsisnotanintegerorafloat
TypeError:ifm_aorm_bisnotarectangle
ValueError:ifm_aorm_bisempty

Return:
resultingmatrixfromthemultiplication
"""
ifm_a==[]orm_a==[[]]:
raiseValueError("m_acan'tbeempty")
ifm_b==[]orm_b==[[]]:
raiseValueError("m_bcan'tbeempty")
ifnotisinstance(m_a,list):
raiseTypeError("m_amustbealist")
ifnotisinstance(m_b,list):
raiseTypeError("m_bmustbealist")
ifnotall(isinstance(row,list)forrowinm_a):
raiseTypeError("m_amustbealistoflists")
ifnotall(isinstance(row,list)forrowinm_b):
raiseTypeError("m_bmustbealistoflists")
ifnotall((isinstance(ele,int)orisinstance(ele,float))
forelein[numforrowinm_afornuminrow]):
raiseTypeError(m_ashouldnotcontainonlyintegersorfloats)
ifnotall((isinstance(ele,int)orisinstance(ele,float))
forelein[numforrowinm_bfornuminrow]):
raiseTypeError(m_bshouldnotcontainonlyintegersorfloats)
ifnotall(len(row)==len(m_a[0])forrowinm_a):
raiseTypeError("eachrowofm_amustshouldbeofthesamesize")
ifnotall(len(row)==len(m_b[0])forrowinm_b):
raiseTypeError("eachrowofm_bmustshouldbeofthesamesize")
iflen(m_a[0])!=len(m_b):
raiseValueError("m_aandm_bcan'tbemultiplied")
b_invert=[]
forxinrange(len(m_b[0])):
n_row=[]
foryinrange(len(m_b)):
n_row.append(m_b[y][x])
b_invert.append(n_row)
matrix_n=[]
forrowinm_a:
n_row=[]
forcolinb_invert:
product=0
forzinrange(len(b_invert[0])):
product+=row[z]*col[z]
n_row.append(product)
matrix_n.append(n_row)
returnmatrix_n
